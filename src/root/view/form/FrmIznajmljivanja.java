/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package root.view.form;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableRowSorter;
import root.domain.Iznajmljivanje;
import root.domain.Korisnik;
import root.domain.Trotinet;
import root.kontroler.Kontroler;
import root.niti.OsveziNit;
import root.niti.OsveziNitIznajmljivanje;
import root.view.form.komponente.tabele.ModelTabeleIznajmljivanja;

/**
 *
 * @author Bane
 */
public class FrmIznajmljivanja extends javax.swing.JFrame {
    /**
     * Creates new form FrmIznajmljivanja
     */
    public FrmIznajmljivanja() {
        super("Iznajmljivanje");
        initComponents();
        srediFormu();
        OsveziNitIznajmljivanje oni = new OsveziNitIznajmljivanje(this);
        oni.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtDatumZad = new javax.swing.JTextField();
        txtDatumRaz = new javax.swing.JTextField();
        cmbKorisnik = new javax.swing.JComboBox();
        cmbTrotinet = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        btnDostupnost = new javax.swing.JButton();
        btnIznajmi = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaIznajmljivanja = new javax.swing.JTable();
        btnOdustani = new javax.swing.JButton();
        btnIzmeni = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        txtFilter = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        btnDatumi = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Iznajmljivanje");

        jLabel1.setText("Datum zaduzenja: ");

        jLabel2.setText("Datum razduzenja: ");

        cmbKorisnik.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbKorisnik.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbKorisnikActionPerformed(evt);
            }
        });

        cmbTrotinet.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel3.setText("Korisnik: ");

        jLabel4.setText("Trotinet: ");

        btnDostupnost.setText("Prikazi dostupne");
        btnDostupnost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDostupnostActionPerformed(evt);
            }
        });

        btnIznajmi.setText("Iznajmi");
        btnIznajmi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIznajmiActionPerformed(evt);
            }
        });

        tabelaIznajmljivanja.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tabelaIznajmljivanja);

        btnOdustani.setText("Odustani");
        btnOdustani.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOdustaniActionPerformed(evt);
            }
        });

        btnIzmeni.setText("Izmeni");
        btnIzmeni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIzmeniActionPerformed(evt);
            }
        });

        jLabel5.setText("Filter:");

        txtFilter.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtFilterKeyReleased(evt);
            }
        });

        jLabel6.setText("Iznajmljeno: ");

        jLabel7.setText("(yyyy.MM.dd) -> godina.mesec.dan");

        jLabel8.setText("(yyyy.MM.dd) -> godina.mesec.dan");

        btnDatumi.setText("Izmeni datume");
        btnDatumi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDatumiActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnIzmeni)
                        .addGap(18, 18, 18)
                        .addComponent(btnOdustani))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnIznajmi)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel4)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(cmbTrotinet, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addComponent(jLabel1)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(txtDatumZad, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addComponent(jLabel2)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txtDatumRaz))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel3)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(cmbKorisnik, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addComponent(btnDostupnost)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(btnDatumi)))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel7)
                                            .addComponent(jLabel8)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel6)))
                        .addGap(0, 129, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtDatumZad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtDatumRaz, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnDostupnost)
                        .addGap(15, 15, 15))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnDatumi)
                        .addGap(18, 18, 18)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbTrotinet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbKorisnik, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addComponent(btnIznajmi)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnIzmeni)
                    .addComponent(btnOdustani))
                .addGap(31, 31, 31))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnDostupnostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDostupnostActionPerformed
        
        try {
            SimpleDateFormat sdf= new SimpleDateFormat("yyyy.MM.dd");
            
            if(txtDatumRaz.getText().isEmpty()||txtDatumZad.getText().isEmpty()){
                JOptionPane.showMessageDialog(this, "Morate uneti datume!" , "Proveri dostupnosti", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            Date datumRazduzivanja = sdf.parse(txtDatumRaz.getText());
            Date datumIznajmljivanja = sdf.parse(txtDatumZad.getText());
            
            Date date=java.util.Calendar.getInstance().getTime();
            
            if(datumIznajmljivanja.before(date)){
                JOptionPane.showMessageDialog(this, "Datum iznajmljivanja ne moze biti pre danasnjeg datuma!" , "Proveri dostupnosti", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            if(datumIznajmljivanja.after(datumRazduzivanja)){
                JOptionPane.showMessageDialog(this, "Datum iznajmljivanja mora biti pre datuma razduzivanja!" , "Proveri dostupnosti", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if(datumIznajmljivanja.equals(datumRazduzivanja)){
               JOptionPane.showMessageDialog(this, "Minimalan perid iznajmljivanja trotineta je jedan dan!" , "Proveri dostupnosti", JOptionPane.ERROR_MESSAGE);
               return;
            }
            
            List<Trotinet> trotineti = new ArrayList<>();
            trotineti = Kontroler.getInstance().vratiSveTrotinete();
            
            
            List<Iznajmljivanje> iznajmljivanja = new ArrayList<>();
            iznajmljivanja = Kontroler.getInstance().vratiSvaIznajmljivanja();
            
            for (Iznajmljivanje iznam : iznajmljivanja) {
                if ((datumIznajmljivanja.before(iznam.getDatumRazduzenja()))&&(iznam.getDatumZaduzenja().before(datumRazduzivanja))){
                    for (int i = 0; i < trotineti.size(); i++) {
                        if(trotineti.get(i).getBrojSasije().equals(iznam.getTrotinet().getBrojSasije())){
                            trotineti.remove(i);
                        }
                        
                    }
                }
            }
           
            popuniKombo();
            popuniKomboTrotineta(trotineti);
            cmbKorisnik.setEnabled(true);
            cmbTrotinet.setEnabled(true);
            btnIznajmi.setEnabled(true);
            txtDatumZad.setEditable(false);
            txtDatumRaz.setEditable(false);
            
            
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(this, "Datum morate uneti u formatu yyyy.MM.dd!\n" + ex.getMessage(), "Proveri dostupnosti", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(FrmKorisnikIzmena.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_btnDostupnostActionPerformed

    private void cmbKorisnikActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbKorisnikActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbKorisnikActionPerformed

    private void btnOdustaniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOdustaniActionPerformed
       dispose();
    }//GEN-LAST:event_btnOdustaniActionPerformed

    private void btnIznajmiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIznajmiActionPerformed
        Iznajmljivanje i = new Iznajmljivanje();
        if(!(txtDatumRaz.isEditable()&&txtDatumZad.isEditable())){
           
        
       try {
            SimpleDateFormat sdf= new SimpleDateFormat("yyyy.MM.dd");
            
            Date datumRazduzivanja = sdf.parse(txtDatumRaz.getText());
            Date datumIznajmljivanja = sdf.parse(txtDatumZad.getText());
            
            
            i.setDatumZaduzenja(datumIznajmljivanja);
            i.setDatumRazduzenja(datumRazduzivanja);
            i.setKorisnik((Korisnik) cmbKorisnik.getSelectedItem());
            i.setTrotinet((Trotinet) cmbTrotinet.getSelectedItem());
            
            
            
            
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(this, "Datum morate uneti u formatu yyyy.MM.dd!\n" + ex.getMessage(), "Unos iznjamljivanja", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(FrmKorisnikIzmena.class.getName()).log(Level.SEVERE, null, ex);
           }
          
        try {
            Kontroler kontroler = Kontroler.getInstance();
            kontroler.dodajIznajmljivanje(i);
            JOptionPane.showMessageDialog(this, "Uspesno iznajmljen trotinet!");
            txtDatumRaz.setEditable(true);
            txtDatumZad.setEditable(true);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
        }else{
        
        JOptionPane.showMessageDialog(this, "Morate proveriti dostupnost datuma pre novog iznajmljivanja!\n" , "Unos iznjamljivanja", JOptionPane.ERROR_MESSAGE);        }
        
    }//GEN-LAST:event_btnIznajmiActionPerformed

    private void txtFilterKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFilterKeyReleased
        String query = txtFilter.getText();
        filtrirajTabelu(query);
    }//GEN-LAST:event_txtFilterKeyReleased

    private void btnIzmeniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIzmeniActionPerformed
         if(tabelaIznajmljivanja.getSelectedRow()==-1){
               JOptionPane.showMessageDialog(this, "Morate selektovati iznajmljivanje u tabeli!","Izmena iznajmljivanja",JOptionPane.ERROR_MESSAGE);
           }
           
           int red = tabelaIznajmljivanja.getSelectedRow();
           int pravired = tabelaIznajmljivanja.convertRowIndexToModel(red);
           
           if(pravired!=-1){
           ModelTabeleIznajmljivanja mti = (ModelTabeleIznajmljivanja) tabelaIznajmljivanja.getModel();
           Iznajmljivanje izabranoIznjamljivanje = mti.dajIzabranoIznajmljivanje(pravired);
           FrmIznajmljivanjeIzmena fii = new FrmIznajmljivanjeIzmena(this, true);
           fii.srediFormu(izabranoIznjamljivanje);
           fii.setLocationRelativeTo(this);
           fii.pack();
           fii.setKorisnik(izabranoIznjamljivanje.getKorisnik());
           fii.setTrotinet(izabranoIznjamljivanje.getTrotinet());
           fii.setSifraIznajmljivanja(izabranoIznjamljivanje.getSifraIznajmljivanja());
           fii.setVisible(true);
           }
        
    }//GEN-LAST:event_btnIzmeniActionPerformed

    private void btnDatumiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDatumiActionPerformed
       txtDatumRaz.setEditable(true);
       txtDatumZad.setEditable(true);
    }//GEN-LAST:event_btnDatumiActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDatumi;
    private javax.swing.JButton btnDostupnost;
    private javax.swing.JButton btnIzmeni;
    private javax.swing.JButton btnIznajmi;
    private javax.swing.JButton btnOdustani;
    private javax.swing.JComboBox cmbKorisnik;
    private javax.swing.JComboBox cmbTrotinet;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabelaIznajmljivanja;
    private javax.swing.JTextField txtDatumRaz;
    private javax.swing.JTextField txtDatumZad;
    private javax.swing.JTextField txtFilter;
    // End of variables declaration//GEN-END:variables

    private void popuniKombo() {
        List<Korisnik> korisnici = new ArrayList<>();
        korisnici = Kontroler.getInstance().vratiSveKorisnike();
        cmbKorisnik.removeAllItems();
        for (Korisnik k : korisnici) {
            cmbKorisnik.addItem(k);
        }
    }

    void srediFormu() {
        cmbKorisnik.setEnabled(false);
        cmbTrotinet.setEnabled(false);
        btnIznajmi.setEnabled(false);
    }

    void popuniKomboTrotineta(List<Trotinet> trotineti) {
        cmbTrotinet.removeAllItems();
        for (Trotinet t : trotineti) {
            cmbTrotinet.addItem(t);
        }
    }

    public void srediTabelu() {
        List<Iznajmljivanje> i = Kontroler.getInstance().vratiSvaIznajmljivanja();
        ModelTabeleIznajmljivanja mti = new ModelTabeleIznajmljivanja(i);
        tabelaIznajmljivanja.setModel(mti);
    }
    
    private void filtrirajTabelu(String query) {
        ModelTabeleIznajmljivanja mti = (ModelTabeleIznajmljivanja) tabelaIznajmljivanja.getModel();
        TableRowSorter<AbstractTableModel> tr = new TableRowSorter<AbstractTableModel>(mti);
        tabelaIznajmljivanja.setRowSorter(tr);
        tr.setRowFilter(RowFilter.regexFilter(query));

    }

}
