/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package root.view.form;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import root.domain.Iznajmljivanje;
import root.domain.Korisnik;
import root.domain.Trotinet;
import root.kontroler.Kontroler;

/**
 *
 * @author Bane
 */
public class FrmIznajmljivanjeIzmena extends javax.swing.JDialog {
    
    private Korisnik korisnik;
    private Trotinet trotinet;
    private int sifraIznajmljivanja;

    public Korisnik getKorisnik() {
        return korisnik;
    }

    public void setKorisnik(Korisnik korisnik) {
        this.korisnik = korisnik;
    }

    public Trotinet getTrotinet() {
        return trotinet;
    }

    public void setTrotinet(Trotinet trotinet) {
        this.trotinet = trotinet;
    }

    public int getSifraIznajmljivanja() {
        return sifraIznajmljivanja;
    }

    public void setSifraIznajmljivanja(int sifraIznajmljivanja) {
        this.sifraIznajmljivanja = sifraIznajmljivanja;
    }
    
    
    
    

    /**
     * Creates new form FrmIznajmljivanjeIzmena
     */
    public FrmIznajmljivanjeIzmena(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtDatumZad = new javax.swing.JTextField();
        txtDatumRaz = new javax.swing.JTextField();
        btnSacuvaj = new javax.swing.JButton();
        btnOtkazi = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Izmena datuma iznajmljivanja");

        jLabel1.setText("Datum zaduzenja: ");

        jLabel2.setText("Datum razduzenja: ");

        btnSacuvaj.setText("Sacuvaj");
        btnSacuvaj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSacuvajActionPerformed(evt);
            }
        });

        btnOtkazi.setText("Otkazi");
        btnOtkazi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOtkaziActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnSacuvaj)
                        .addGap(18, 18, 18)
                        .addComponent(btnOtkazi))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtDatumZad, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtDatumRaz, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtDatumZad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtDatumRaz, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnOtkazi)
                    .addComponent(btnSacuvaj))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnOtkaziActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOtkaziActionPerformed
       dispose();
    }//GEN-LAST:event_btnOtkaziActionPerformed

    private void btnSacuvajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSacuvajActionPerformed
         Iznajmljivanje i = dajIznajmljivanje();   
         if(i.getDatumZaduzenja()!=null && i.getDatumRazduzenja()!=null){
        try {
            Kontroler.getInstance().izmeniIznjamljivanje(i);
            JOptionPane.showMessageDialog(this, "Datum uspesno izmenjen!\n", "Izmena datuma iznajmljivanja", JOptionPane.INFORMATION_MESSAGE);
            
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Greska prilikom izmene!\n" + ex.getMessage(), "Izmena datuma iznajmljivanja", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(FrmKorisnikIzmena.class.getName()).log(Level.SEVERE, null, ex);

        }
         }
           
    }//GEN-LAST:event_btnSacuvajActionPerformed

    /**
     * @param args the command line arguments
     */


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnOtkazi;
    private javax.swing.JButton btnSacuvaj;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField txtDatumRaz;
    private javax.swing.JTextField txtDatumZad;
    // End of variables declaration//GEN-END:variables

    void srediFormu(Iznajmljivanje izabranoIznjamljivanje) {
        SimpleDateFormat sdf= new SimpleDateFormat("yyyy.MM.dd");
        txtDatumZad.setText(sdf.format(izabranoIznjamljivanje.getDatumZaduzenja()));
        txtDatumRaz.setText(sdf.format(izabranoIznjamljivanje.getDatumRazduzenja()));
        Date date=java.util.Calendar.getInstance().getTime();
        if(izabranoIznjamljivanje.getDatumZaduzenja().before(date)){
            txtDatumZad.setEditable(false);
            txtDatumRaz.setEditable(false);
            btnSacuvaj.setEnabled(false);
            JOptionPane.showMessageDialog(this, "Ne mozete izmeniti dato iznajmljivanje, korisnik je vec preuzeo trotinet");
        }
                
    }

    private Iznajmljivanje dajIznajmljivanje() {
        Iznajmljivanje i = new Iznajmljivanje();
       
        try {
            SimpleDateFormat sdf= new SimpleDateFormat("yyyy.MM.dd");
             if(!(txtDatumZad.getText().isEmpty())&&!(txtDatumRaz.getText().isEmpty())){
              Date datumRazduzivanja = sdf.parse(txtDatumRaz.getText());
              Date datumIznajmljivanja = sdf.parse(txtDatumZad.getText());
              boolean provera = proveraDatuma(datumIznajmljivanja,datumRazduzivanja);
              if(provera){
              i.setDatumZaduzenja(datumIznajmljivanja);
              i.setDatumRazduzenja(datumRazduzivanja);
              }
            }else{
                JOptionPane.showMessageDialog(this, "Morate uneti datume!" , "Izmena datuma iznajmljivanja", JOptionPane.ERROR_MESSAGE);
            }
           
            i.setKorisnik(getKorisnik());
            i.setTrotinet(getTrotinet());
            i.setSifraIznajmljivanja(getSifraIznajmljivanja());
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(this, "Datum morate uneti u formatu yyyy.MM.dd!\n" + ex.getMessage(), "Izmena datuma iznajmljivanja", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(FrmIznajmljivanjeIzmena.class.getName()).log(Level.SEVERE, null, ex);
        }
        return i;
    
      
    }

    private boolean proveraDatuma(Date datumIznajmljivanja, Date datumRazduzivanja) {

            if(txtDatumRaz.getText().isEmpty()||txtDatumZad.getText().isEmpty()){
                JOptionPane.showMessageDialog(this, "Morate uneti datume!" , "Izmena datuma iznajmljivanja", JOptionPane.ERROR_MESSAGE);
                return false;
            }
            
            Date date=java.util.Calendar.getInstance().getTime();
            
            if(datumIznajmljivanja.before(date)){
                JOptionPane.showMessageDialog(this, "Datum iznajmljivanja ne moze biti pre danasnjeg datuma!" , "Izmena datuma iznajmljivanja", JOptionPane.ERROR_MESSAGE);
                return false;
            }
            
            if(datumIznajmljivanja.after(datumRazduzivanja)){
                JOptionPane.showMessageDialog(this, "Datum iznajmljivanja mora biti pre datuma razduzivanja!" , "Izmena datuma iznajmljivanja", JOptionPane.ERROR_MESSAGE);
                return false;
            }
            if(datumIznajmljivanja.equals(datumRazduzivanja)){
               JOptionPane.showMessageDialog(this, "Minimalan period iznajmljivanja trotineta je jedan dan!" , "Izmena datuma iznajmljivanja", JOptionPane.ERROR_MESSAGE);
               return false;
            }
            
            List<Trotinet> trotineti = new ArrayList<>();
            trotineti = Kontroler.getInstance().vratiSveTrotinete();
            
            
            List<Iznajmljivanje> iznajmljivanja = new ArrayList<>();
            iznajmljivanja = Kontroler.getInstance().vratiSvaIznajmljivanja();
            
            
            for (Iznajmljivanje iznam : iznajmljivanja) {
                if(!(iznam.getSifraIznajmljivanja()==getSifraIznajmljivanja()))return true;
                if ((datumIznajmljivanja.before(iznam.getDatumRazduzenja()))&&(iznam.getDatumZaduzenja().before(datumRazduzivanja))){
                    JOptionPane.showMessageDialog(this, "Nije moguce iznajmiti trotinet za ove datume, proverite dostupnost!" , "Izmena datuma iznajmljivanja", JOptionPane.ERROR_MESSAGE);
                    return false;
                }
                
            }
           
 
 
        return true;
    }                                             


}
